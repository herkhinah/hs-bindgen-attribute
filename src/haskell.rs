pub(crate) struct Signature {
    pub(crate) ident: String,
}

pub(crate) fn template(module: &str, signatures: &[Signature]) -> String {
    let names = signatures
        .iter()
        .map(|x| x.ident.clone())
        .collect::<Vec<String>>()
        .join(" ");
    let imports = signatures
        .iter()
        .map(|x| {
            let ident = x.ident.clone();
            format!("foreign import ccall unsafe \"c_{ident}\" {ident} :: IO ()")
        })
        .collect::<Vec<String>>()
        .join("\n");
    format!(
        "-- This file was generated by `hs-bindgen` crate and contain C FFI bindings
-- wrappers for every Rust function annotated with `#[hs_bindgen]`
{{-# LANGUAGE ForeignFunctionInterface #-}}

module {module} ({names}) where

{imports}"
    )
}
