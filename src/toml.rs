use semver::{Version, VersionReq};
use serde::Deserialize;
use std::fs;

/// Struct that map the content of `.hsbindgen` config file
#[derive(Deserialize)]
pub(crate) struct Config {
    pub(crate) default: Option<String>,
    pub(crate) version: Option<String>,
}

/// Read `.hsbindgen` config file generated by `cabal-pack`
pub(crate) fn config() -> Config {
    let config = toml::from_str(&fs::read_to_string(".hsbindgen").expect(
        "fail to read content of `.hsbindgen` configuration file
n.b. you have to run the command `cabal-pack` to generate it",
    ))
    .expect("fail to parse TOML content of `hsbindgen` file");

    // Compatibility constraints on `cabal-pack` version used
    check_version(&config);

    config
}

/// Compatibility constraints on `cabal-pack` version used
fn check_version(config: &Config) {
    let req = VersionReq::parse("<=0.3").unwrap();
    let version = config
        .version
        .as_ref()
        .expect("a version field is required in `.hsbindgen`");
    let version = Version::parse(version)
        .expect("version field of `.hsbindgen` does not follow SemVer format");
    assert!(
        req.matches(&version),
        "incompatible versions of `cabal-pack`/`hs-bindgen` used, please update"
    );
}
